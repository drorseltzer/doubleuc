class {{CLASS_NAME}} extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.isRendered = false;
  }

  static get observedAttributes() {
    {{OBSERVED_ATTRIBUTES}};
  }

  {{GETTERS_SETTERS}}

  {{METHODS}}

  initAttributes() {
    {{ATTRIBUTES_INITS}}
  }

  initListeners() {
    {{LISTENERS_INITS}}
  }

  connectedCallback() {
    this.initAttributes();
    {{CONNECTED_CALLBACKS}}
    this.firstRender();
  }

  disconnectedCallback() {
    {{DISCONNECTED_CALLBACKS}}
  }

  adoptedCallback() {
    {{ADOPTED_CALLBACKS}}
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (newValue !== oldValue && this.isRendered) {
      if (name.startsWith('style-')) {
        this.renderCss();
      } else {
        this.render();
        this.initListeners();
      }
    }
    {{ATTRIBUTE_CHANGED_CALLBACKS}}
  }

  firstRender() {
    this.shadowRoot.innerHTML = `
      <style class="vars">:host { {{CSS_VARS}} }</style>
      <style class="style">{{STYLE}}</style>
      <slot></slot>
      <div class="ref">
        {{TEMPLATE_HTML}}
      </div>
    `.trim();
    this.initListeners();
    this.isRendered = true;
  }

  getAllChildren(element) {
    let children = Array.from(element.children);
    if (!children.length) {
      return [];
    }
    return children.concat(
      children.flatMap(child => this.getAllChildren(child))
    );
  }

  syncCustomElements() {
    const ref = this.shadowRoot.querySelector('.ref');
    const docFrag = new DocumentFragment();

    const template = document.createElement('div');
    template.id = 'ref';
    template.innerHTML = `{{TEMPLATE_HTML}}`;
    docFrag.append(template);

    const currentChildren = this.getAllChildren(ref);
    const customElementsChildren = currentChildren.map(child => {
      const isCustomElement = !!window.customElements.get(child.nodeName.toLowerCase());
      return isCustomElement ? child : false;
    });

    if (!customElementsChildren.some(child => !!child)) {
      return docFrag;
    }

    const futureChildren = this.getAllChildren(docFrag.querySelector('div#ref'))
    const customElementsFutureChildren = futureChildren.map(child => {
      const isCustomElement = !!window.customElements.get(child.nodeName.toLowerCase());
      return isCustomElement ? child : false;
    });

    for (let i = 0; i < customElementsFutureChildren.length; i++) {
      const futureChild = customElementsFutureChildren[i];
      const currentChild = customElementsChildren[i];

      if (!currentChild) {
        continue;
      }

      futureChild.parentNode.insertBefore(currentChild, futureChild);
      futureChild.remove();
    }

    return docFrag;
  }

  render() {
    const ref = this.shadowRoot.querySelector('.ref');
    const newRef = this.syncCustomElements();
    ref.replaceChildren();
    Array.from(newRef.querySelector('div#ref').children).forEach(ele => ref.appendChild(ele));
  }

  renderCss() {
    const vars = this.shadowRoot.querySelector('.vars');
    vars.innerText = `:host { {{CSS_VARS}} }`;
  }
}

customElements.define('{{TAG_NAME}}', {{CLASS_NAME}});
