class {{CLASS_NAME}} extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.isRendered = false;
  }

  static get observedAttributes() {
    {{OBSERVED_ATTRIBUTES}};
  }

  {{GETTERS_SETTERS}}

  {{METHODS}}

  initAttributes() {
    {{ATTRIBUTES_INITS}}
  }

  initListeners() {
    {{LISTENERS_INITS}}
  }

  connectedCallback() {
    this.initAttributes();
    {{CONNECTED_CALLBACKS}}
    this.firstRender();
    this.initListeners();
  }

  disconnectedCallback() {
    {{DISCONNECTED_CALLBACKS}}
  }

  adoptedCallback() {
    {{ADOPTED_CALLBACKS}}
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (newValue !== oldValue && this.isRendered) {
      this.render(name);
    }
    {{ATTRIBUTE_CHANGED_CALLBACKS}}
  }

  checkIfs(node) {
    const ifsElements = node.querySelectorAll('[ref-if]');
    for(const ifElement of ifsElements){
      if (ifElement.getAttribute('ref-if') === 'false') {
        ifElement.innerHTML = `<!-- ${ifElement.innerHTML} //-->`;
      }
    }
  }

  firstRender() {
    this.shadowRoot.innerHTML = `
      <style class="vars">:host { {{CSS_VARS}} }</style>
      <style class="style">{{STYLE}}</style>
      <slot></slot>
      <div class="ref">
        {{TEMPLATE_HTML}}
      </div>
    `.trim();
    this.checkIfs(this.shadowRoot);
    this.isRendered = true;
  }

  render(attribute) {
    if (attribute.startsWith('style-')) {
      this.renderCss();
    }
    const template = document.createElement('div');
    template.className = 'ref';
    template.innerHTML = `{{TEMPLATE_HTML}}`;
    this.checkIfs(template);
    const refs = this.shadowRoot.querySelectorAll(`.ref-${attribute}`);
    const futureRefs = template.querySelectorAll(`.ref-${attribute}`);
    const refsAttributes = this.shadowRoot.querySelectorAll(`[ref-attribute]`);
    const futureRefsAttributes = template.querySelectorAll(`[ref-attribute]`);
    const refsIfs = this.shadowRoot.querySelectorAll(`[ref-if]`);
    const futureRefsIfs = template.querySelectorAll(`[ref-if]`);
    const methods = this.shadowRoot.querySelectorAll('.ref-method');

    for(let i = 0; i < refsAttributes.length; i++){
      for (let attr of futureRefsAttributes[i].attributes) {
        if (refsAttributes[i].hasAttribute(attr.name)) {
          refsAttributes[i].setAttribute(attr.name, attr.value);
        }
        else {
          refsAttributes[i].setAttribute(attr.name, attr.value);
        }
      }
      for (let attr of refsAttributes[i].attributes) {
        if (!futureRefsAttributes[i].hasAttribute(attr.name)) {
          refsAttributes[i].removeAttribute(attr.name);
        }
      }
    }

    for(let i = 0; i < refs.length; i++){
        if (refs[i] && futureRefs[i]) {
          refs[i].innerHTML = futureRefs[i].innerHTML;
        } else if(refs[i] && !futureRefs[i] ) {
          refs[i].remove();
        } else if(!refs[i] && futureRefs[i] ) {
        }
    }

    for (let i=0; i < refsIfs.length; i++){
      if (refsIfs[i].innerHTML !== futureRefsIfs[i].innerHTML) refsIfs[i].innerHTML = futureRefsIfs[i].innerHTML;
    }

    for(const method of methods) {
      const methodName = Array.from(method.classList.values()).filter(className => className.startsWith('ref-method-'))?.at(0).replace('ref-method-','');
      method.innerHTML = `${this[methodName]()}`;
    }

    template.replaceChildren();
    template.remove();
  }

  renderCss() {
    const vars = this.shadowRoot.querySelector('.vars');
    vars.innerText = `:host { {{CSS_VARS}} }`;
  }
}

customElements.define('{{TAG_NAME}}', {{CLASS_NAME}});
