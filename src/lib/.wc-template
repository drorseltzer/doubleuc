class {{CLASS_NAME}} extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.isRendered = false;
  }

  static get observedAttributes() {
    {{OBSERVED_ATTRIBUTES}};
  }

  {{GETTERS_SETTERS}}

  {{METHODS}}

  initAttributes() {
    {{ATTRIBUTES_INITS}}
  }

  initListeners() {
    {{LISTENERS_INITS}}
  }

  connectedCallback() {
    this.initAttributes();
    {{CONNECTED_CALLBACKS}}
    this.firstRender();
  }

  disconnectedCallback() {
    {{DISCONNECTED_CALLBACKS}}
  }

  adoptedCallback() {
    {{ADOPTED_CALLBACKS}}
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (newValue !== oldValue && this.isRendered) {
      if (name.startsWith('style-')) {
        this.renderCss();
      } else {
        this.render();
        // this.initListeners();
      }
    }
    {{ATTRIBUTE_CHANGED_CALLBACKS}}
  }

  firstRender() {
    this.shadowRoot.innerHTML = `
      <style class="vars">:host { {{CSS_VARS}} }</style>
      <style class="style">{{STYLE}}</style>
      <slot></slot>
      <div class="ref">
        {{TEMPLATE_HTML}}
      </div>
    `.trim();
    this.initListeners();
    this.isRendered = true;
  }

  updateHtmlNode(node1, node2) {
    const isCustom1 = window.customElements.get(node1.tagName.toLowerCase()) !== undefined;
    const isCustom2 = window.customElements.get(node2.tagName.toLowerCase()) !== undefined;

    if (isCustom1 || isCustom2) {
     const attributes1 = node1.attributes;
     const attributes2 = node2.attributes;

     for (let i = 0; i < attributes2.length; i++) {
       const attribute2 = attributes2[i];
       const attribute1 = attributes1.getNamedItem(attribute2.name);

       if (!attribute1 || attribute1.value !== attribute2.value) {
         node1.setAttribute(attribute2.name, attribute2.value);
       }
     }
      return;
    }

    const attributes1 = node1.attributes;
    const attributes2 = node2.attributes;

    for (let i = 0; i < attributes2.length; i++) {
      const attribute2 = attributes2[i];
      const attribute1 = attributes1.getNamedItem(attribute2.name);

      if (!attribute1 || attribute1.value !== attribute2.value) {
        node1.setAttribute(attribute2.name, attribute2.value);
      }
    }

    for (let i = 0; i < attributes1.length; i++) {
      const attribute1 = attributes1[i];
      const attribute2 = attributes2.getNamedItem(attribute1.name);

      if (!attribute2) {
        node1.removeAttribute(attribute1.name);
      }
    }

    const children1 = Array.from(node1.childNodes).filter(child => child.nodeType !== Node.TEXT_NODE);
    const children2 = Array.from(node2.childNodes).filter(child => child.nodeType !== Node.TEXT_NODE);

    for (let i = 0; i < children2.length; i++) {
      const child1 = children1[i];
      const child2 = children2[i];

      if (!child1) {
        node1.appendChild(child2.cloneNode(true));
      } else if (child2.nodeType === Node.ELEMENT_NODE) {
        this.updateHtmlNode(child1, child2);
      }
    }

    if (!children2.length && node1.innerHTML !== node2.innerHTML) {
      node1.innerHTML = node2.innerHTML;
    }
  }

  render() {
    const ref = this.shadowRoot.querySelector('.ref');
    const template = document.createElement('div');
    template.className = 'ref';
    template.innerHTML = `{{TEMPLATE_HTML}}`;
    this.updateHtmlNode(ref, template);
  }

  renderCss() {
    const vars = this.shadowRoot.querySelector('.vars');
    vars.innerText = `:host { {{CSS_VARS}} }`;
  }
}

customElements.define('{{TAG_NAME}}', {{CLASS_NAME}});
